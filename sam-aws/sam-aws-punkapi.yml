# Machine Learning Platform Engineer - Desafio Punk API
# Doc: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy.html
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Configura recursos AWS para desafio PunkAPI

# Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  KinesisStreamName:
    Type: String
    Default: "PunkAPIKinesisStream"
    Description: "Define o nome para Kinesis Data Stream."

# Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # LogicalID
  # Função Lambda para consumir API
  PunkAPICliLambda:
    # Doc: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: punkapi_cli/
      Handler: app.lambda_handler
      Runtime: python3.8
      FunctionName: PunkAPICliLambdaFunction
      VersionDescription: "0.01"
      Description: "Função lambda que consome endpoint da Punk API para obter bebidas aleatórias."
      Environment:
        Variables:
          KinesisStreamName: !Ref KinesisStreamName
      # Permite enviar dados para Kinesis
      Role: !GetAtt LambdaToKinesisPutRecordRole.Arn
  # Cria AWS Kinesis Data Stream  
  KinesisStream:
    # Doc https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-kinesis-stream.html
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Ref KinesisStreamName
      ShardCount: 1
    # Ref: https://serverlessland.com/patterns/kinesis-lambda
  # Cria uma regra de acesso para Lambda escrever no Kinesis
  LambdaToKinesisPutRecordRole:
    # Doc: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
              # Link: https://docs.aws.amazon.com/general/latest/gr/ak.html
            Action: 
              - "sts:AssumeRole"
              # Ref: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html 
              # Returns a set of temporary security credentials that you can use to access AWS resources that you might not normally have access to.
      Policies:
        - PolicyName: KinesisPutRecordPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - kinesis:PutRecord
                # Kinesis actions: https://docs.aws.amazon.com/kinesis/latest/APIReference/API_Operations.html
              Effect: Allow
              Resource:
                - !GetAtt KinesisStream.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt KinesisStream.Arn }
      RoleName: "KinesisPutRecordRole"
      Description: "Cria uma regra para permitir a função lambda a enviar dados para o Kinesis." 
  # Cria repositório para dados Raw
  RawDataBucket:
    # Doc: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
    Type: AWS::S3::Bucket
    Properties:
      BucketName: punkapiraw
  # Cria repositório para dados cleaned
  CleanedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: punkapicleaned
  # Função Lambda para resgatar campos de interesse (clean)
  PunkAPICleanLambda:
    # Doc: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: punkapi_clean/
      Handler: app.lambda_handler
      Runtime: python3.8
      FunctionName: PunkAPICleanLambdaFunction
      VersionDescription: "0.01"
      Description: "Função lambda que resgata os campos de interesse."
  # Cria Firehose para ingerir dados no S3
  FirehoseStream:
    # Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisfirehose-deliverystream.html
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: PunkAPIFirehose
      DeliveryStreamType: KinesisStreamAsSource
      # Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisfirehose-deliverystream-kinesisstreamsourceconfiguration.html
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt KinesisStream.Arn
        RoleARN: !GetAtt FirehoseRole.Arn
      # Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisfirehose-deliverystream-s3destinationconfiguration.html
      # S3DestinationConfiguration:
      #   BucketArn: !GetAtt RawDataBucket.Arn
      #   BufferingHints:
      #     IntervalInSeconds: 60
      #     SizeInMBs: 3
      #   RoleARN: !GetAtt FirehoseRole.Arn
      # Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisfirehose-deliverystream-extendeds3destinationconfiguration.html
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt CleanedDataBucket.Arn
        CompressionFormat: GZIP
        RoleARN: !GetAtt FirehoseRole.Arn
        BufferingHints:
          IntervalInSeconds: 120
          SizeInMBs: 10
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt PunkAPICleanLambda.Arn
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt RawDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN: !GetAtt FirehoseRole.Arn
          BufferingHints:
            IntervalInSeconds: 120
            SizeInMBs: 10  
  # Cria regra de acesso do Firehose para Kinesis Stream
  FirehoseRole:
    # Doc: https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
              # Link: https://docs.aws.amazon.com/general/latest/gr/ak.html
            Action: 
              - "sts:AssumeRole"
              # Ref: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html 
              # Returns a set of temporary security credentials that you can use to access AWS resources that you might not normally have access to.
      Policies:
        - PolicyName: KinesisSourceStreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - kinesis:*
                # # Doc: https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html
                # - kinesis:GetRecords
                # # Doc: https://docs.aws.amazon.com/kinesis/latest/APIReference/API_DescribeStream.html
                # - kinesis:DescribeStream
                # Kinesis actions: https://docs.aws.amazon.com/kinesis/latest/APIReference/API_Operations.html                
              Effect: Allow
              Resource:
                - !GetAtt KinesisStream.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt KinesisStream.Arn }
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                - !GetAtt RawDataBucket.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt RawDataBucket.Arn }
                - !GetAtt CleanedDataBucket.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt CleanedDataBucket.Arn }
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - lambda:InvokeFunction
              Effect: Allow
              Resource:
                - !GetAtt PunkAPICleanLambda.Arn
      RoleName: FirehoseRole
      Description: "Cria uma regra para permitir o firehose acessar dados do Kinesis e escrever no S3." 